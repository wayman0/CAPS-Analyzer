/***************************************************************************
 *   energydlg.cpp                                                         *
 *   Copyright (C) 2014 by Daniel Suson                                    *
 *   suson@calumet.purdue.edu                                              *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 *   In addition, as a special exception, the copyright holders give       *
 *   permission to link the code of this program with any edition of       *
 *   the Qt library by Trolltech AS, Norway (or with modified versions     *
 *   of Qt that use the same license as Qt), and distribute linked         *
 *   combinations including the two.  You must obey the GNU General        *
 *   Public License in all respects for all of the code used other than    *
 *   Qt.  If you modify this file, you may extend this exception to        *
 *   your version of the file, but you are not obligated to do so.  If     *
 *   you do not wish to do so, delete this exception statement from        *
 *   your version.                                                         *
 ***************************************************************************
 * Description:                                                            *
 *                                                                         *
 * This class defines the energy dialog structure associated with          *
 * the Qt4 user interface.                                                 *
 * ----------------------- Change Log ------------------------------------ *
 * Date    Name         Description                                        *
 *                                                                         *
 ***************************************************************************
 * This software evolved from work that was done by Eric Hivon at the      *
 * California Institute of Technology on the MASTER algorithm (Hivon, E.,  *
 * et al., ApJ, vol 567, p 2).  It adapts or interfaces with these         *
 * packages:                                                               *
 *                                                                         *
 * HealPix         (http://www.eso.org/science/healpix/)                   *
 * FTOOLS & FITSIO (http://heasarc.gsfc.nasa.gov/docs/corp/software.html)  *
 *                                                                         *
 * Any publications or presentations that use results generated by this    *
 * program must reference the fact that it was developed by Daniel Suson   *
 ***************************************************************************/
#include "multipleselectiondlg.h"
#include "ui_multipleselectiondlg.h"
#include <../libanalyzer/filemanager.h>

multipleSelectionDialog::multipleSelectionDialog(association* s_assoc) :
              ui(new Ui::multipleSelectionDialog) {
  /* set up the user interface first */
  ui->setupUi(this);
  
  /* initialize internal variables*/
  dataAssoc = s_assoc;
  minEnergy = 0.00;
  maxEnergy = 1000000.00;

  minSlice = 0;
  maxSlice = 0;

  dirty = false;
  isConfigured = false;
  
  /* set up signals and slots */
  connect(ui->buttonBox, &QDialogButtonBox::accepted, this, &multipleSelectionDialog::finalize);
  connect(ui->buttonBox, &QDialogButtonBox::rejected, this, &multipleSelectionDialog::cancel);
  connect(ui->buttonBox, &QDialogButtonBox::helpRequested, this, &multipleSelectionDialog::help);
}

multipleSelectionDialog::~multipleSelectionDialog() {
  delete ui;
}

void multipleSelectionDialog::configure() {
  dirty = false;
  //ui->minEnergyEdit->insert(QString::number(min));
  //ui->maxEnergyEdit->insert(QString::number(max));
  fileManager* fm = dataAssoc->fileIOEngine();
  int slices = fm->slices();

  for(int i = 0; i < slices; i += 1)
  {
    string desc1 = "Slice " + std::to_string(i + 1) + " energy: " + std::to_string(fm->min_energy(i));
    QString* line1 = new QString(desc1.c_str());
    ui->minList->addItem(*line1);

    string desc2 = "Slice " + std::to_string(i + 1) + " energy: " + std::to_string(fm->max_energy(i));
    QString* line2 = new QString(desc2.c_str());
    ui->maxList->addItem(*line2);
  }

  exec();
}

void multipleSelectionDialog::reset() {
  minEnergy = 0.0;
  maxEnergy = 1000000.0;
  minSlice = 0;
  maxSlice = 0;

  //ui->minEnergyEdit->insert(QString::number(minEnergy));
  //ui->maxEnergyEdit->insert(QString::number(maxEnergy));

  ui->minList->clear();
  ui->maxList->clear();

  dirty = false;
  isConfigured = false;
}

void multipleSelectionDialog::validate() {
  QString title, message;
  bool ok = false;
  
  dirty = false; // assume nothing has changed
  

  /* set energy */
  double oldminE = minEnergy;
  double oldmaxE = maxEnergy;
  //minEnergy = ui->minEnergyEdit->text().toDouble(&ok);

  int oldMinS = minSlice;
  int oldMaxS = maxSlice;

  minSlice = ui->minList->currentRow();
  maxSlice = ui->maxList->currentRow();

  if (minSlice < 0 || minSlice > maxSlice)
  {
    title = QString(tr("Error Selecting Minimum Energy"));
    message = QString(tr("The slice selected is less then 0 or greater than the max slice."));
    QMessageBox::critical(this,title,message);
  }

  //maxEnergy = ui->maxEnergyEdit->text().toDouble(&ok);
  if (maxSlice > dataAssoc->fileIOEngine()->slices() || maxSlice < minSlice)
  {
    title = QString(tr("Error Selecting Maximum Energy"));
    message = QString(tr("The slice selected is greater than the maximum number of slices or less than the min slice."));
    QMessageBox::critical(this,title,message);
  }

  if (minSlice != oldMinS || maxSlice != oldMaxS)
    dirty = true;
  
  isConfigured = true;
  return;
}

void multipleSelectionDialog::finalize() {
  int err = 0;
  
  validate();
 
  accept();
  Q_EMIT slicesSelected(minSlice, maxSlice);
}

void multipleSelectionDialog::help() {

}

void multipleSelectionDialog::cancel() {
  QString title, message;
  QMessageBox::StandardButton reply;
  
  if (dirty) {
    title = QString(tr("Energy range changed"));
    message = QString(tr("You have changed the selected energy range.\nDo you really want to quit?"));
    reply = QMessageBox::warning(this,title,message,QMessageBox::Yes | QMessageBox::No,QMessageBox::No);
    if (reply == QMessageBox::No)
      return;
    dirty = false;
  }
  Q_EMIT energySelectionCancelled();
  close();
}
